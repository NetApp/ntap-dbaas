#!/usr/bin/python
###########################################################################
# (c) 2019 NetApp Inc. (NetApp), All Rights Reserved
#
# NetApp disclaims all warranties, excepting NetApp shall provide
# support of unmodified software pursuant to a valid, separate,
# purchased support agreement.  No distribution or modification of
# this software is permitted by NetApp, except under separate
# written agreement, which may be withheld at NetApp's sole
# discretion.
#
# THIS SOFTWARE IS PROVIDED BY NETAPP "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL NETAPP BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Created by Jeffrey Steiner, jfs@netapp.com
#
###########################################################################

###########################################################################
#
# This script sets a database password. I could have done this within the
# main script, but it seemed safer to have an external script that won't
# always be running and storing a password in an ENV variable.
#
###########################################################################

import sys
import os
sys.path.append(sys.path[0] + "/NTAPlib")
from dosqlplus import dosqlplus as dosqlplus
import userio

oraclebase = '/orabin'

oraclehome = os.getenv("ORACLE_HOME")
if oraclehome is None:
    userio.fail("ORACLE_HOME is not set")
elif not os.path.isdir(os.getenv("ORACLE_HOME")):
    fail("ORACLE_HOME is set, but path does not exist")

oraclesid = os.getenv("ORACLE_SID")
if oraclesid is None:
    userio.fail("ORACLE_SID is not set")

oraclepwd = os.getenv("ORACLE_PWD")
if oraclepwd is None:
    userio.fail("ORACLE_PWD is not set")


cmdblock = []
cmdblock.append('alter user sys identified by ' + oraclepwd + ';')
cmdblock.append('alter user system identified by ' + oraclepwd + ';')
if os.getenv("ORACLE_PDB") is None:
    userio.message("No PDB defined")
    userio.message("Changing database passwords for sys and system")
else:
    userio.message("PDB in use")
    userio.message("Changing database passwords for sys, system, and pdbadmin")
    cmdblock.append('alter session set container=' + os.getenv("ORACLE_PDB") + ';')
    cmdblock.append('alter user pdbadmin identified by ' + oraclepwd + ';')
cmdblock.append('exit;')

out = dosqlplus(oraclesid, cmdblock, home=oraclehome, base=oraclebase)
for line in out['STDOUT']:
    userio.message("SQLPLUS STDOUT:" + line)
for line in out['STDERR']:
    userio.message("SQLPLUS STDERR:" + line)
if out['ERRORFLAG']:
    userio.warn("Unexpected SQLPLUS output")
